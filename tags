!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
AR	lib/Makefile	/^AR = ar rv$/;"	m
CC	lib/Makefile	/^CC = gcc$/;"	m
CC	mod/Makefile	/^CC = gcc$/;"	m
CFLAGS	lib/Makefile	/^CFLAGS = -g -O2 -Wall -mcmodel=medium -I..\/include -I$(USR_DIR)\/include\/lapacke -I$(OMP_DIR)\/include -I$(GSL_DIR)\/include -fopenmp$/;"	m
CFLAGS	mod/Makefile	/^CFLAGS = -g -O2 -Wall -mcmodel=medium -I..\/include -I$(USR_DIR)\/include\/lapacke -I$(OMP_DIR)\/include -I$(GSL_DIR)\/include -fopenmp$/;"	m
CSQR	lib/func.c	8;"	d	file:
CalcCoef	lib/func.c	/^void CalcCoef(int B, char *name) {$/;"	f
CalcEigen	lib/func.c	/^void CalcEigen(Solution *s, LParameter *lp, int tb_len, lapack_complex_double *tb, double *ev, lapack_complex_double *es, Energy *e, void (*Interaction)()) {$/;"	f
CalcEnergyMinMax	pyhf3/magstr.py	/^	def CalcEnergyMinMax(self, df, e_label):$/;"	m	class:ML
CalcGap	lib/func.c	/^void CalcGap(Solution *s, double *wg, double *ev, lapack_complex_double *es) {$/;"	f
CalcGauss	lib/func.c	/^void CalcGauss(char *name) {$/;"	f
CalcSolution	lib/func.c	/^void CalcSolution(Solution *s, LParameter *lp, lapack_complex_double *tbg, void (*Interaction)(), void (*GaussQuad)(), int is_tr) {$/;"	f
CalcTB	lib/func.c	/^void CalcTB(Solution *s, void (*Fourier)()) {$/;"	f
CalcTB	lib/func.c	/^void CalcTB(int Nc, int Nl, Lattice *l, lapack_complex_double *tb) {$/;"	f
Coord	include/hf3.h	/^} Coord;$/;"	t	typeref:struct:Coordinate
Coordinate	include/hf3.h	/^typedef struct Coordinate {$/;"	s
DIM	include/hf3.h	9;"	d
DIRS	Makefile	/^DIRS = lib mod$/;"	m
DoLinearRegression	pyhf3/magstr.py	/^	def DoLinearRegression(self, bins, eta, test_size=0.3):$/;"	m	class:ML
DoRandomForest	pyhf3/magstr.py	/^	def DoRandomForest(self, bins, eta, test_size=0.3):$/;"	m	class:ML
DotProd	lib/func.c	/^void DotProd(int Nk, int Ni, Coord *g, lapack_complex_double *tr) {$/;"	f
Draw	pyhf3/draw.py	/^class Draw:$/;"	c
DrawBand	pyhf3/draw.py	/^	def DrawBand(self, type, N, U, ax, is_unfold=0):$/;"	m	class:Draw
DrawBandDOS	pyhf3/draw.py	/^	def DrawBandDOS(self, type, N, U, is_unfold=0):$/;"	m	class:Draw
DrawBandTB	pyhf3/draw.py	/^	def DrawBandTB(self, type):$/;"	m	class:Draw
DrawDOS	pyhf3/draw.py	/^	def DrawDOS(self, type, N, U, ax, e_min=None, e_max=None):$/;"	m	class:Draw
DrawPhase	pyhf3/draw.py	/^	def DrawPhase(self, type):$/;"	m	class:Draw
DrawPhaseCheck	pyhf3/draw.py	/^	def DrawPhaseCheck(self, type1, type2):$/;"	m	class:Draw
DrawSolution	pyhf3/draw.py	/^	def DrawSolution(self, type, N, U):$/;"	m	class:Draw
Energy	include/hf3.h	/^typedef struct Energy {$/;"	s
Energy	include/hf3.h	/^} Energy;$/;"	t	typeref:struct:Energy
FourierBaOsO3D	lib/path.c	/^void FourierBaOsO3D(int l_len, int tb_num, Lattice *l, Vector g, Vector q, lapack_complex_double *tb) {$/;"	f
FourierBaOsO3S	lib/path.c	/^void FourierBaOsO3S(int l_len, int tb_num, Lattice *l, Vector g, Vector q, lapack_complex_double *tb) {$/;"	f
FourierCuAl2O4	lib/path.c	/^void FourierCuAl2O4(int l_len, int tb_num, Lattice *l, Vector g, Vector q, lapack_complex_double *tb) {$/;"	f
GQUAD	include/hf3.h	10;"	d
GREEN	lib/func.c	9;"	d	file:
GSL_DIR	lib/Makefile	/^GSL_DIR = \/opt\/gsl\/$/;"	m
GSL_DIR	mod/Makefile	/^GSL_DIR = \/opt\/gsl\/$/;"	m
GaussQuadD	lib/func.c	/^void GaussQuadD(double fermi, double *wg, double *ev, lapack_complex_double *es, double *n, double *m) {$/;"	f
GaussQuadS	lib/func.c	/^void GaussQuadS(double fermi, double *wg, double *ev, lapack_complex_double *es, double *n, double *m) {$/;"	f
GenName	lib/func.c	/^char* GenName(Solution *s, char *dtype) {$/;"	f
HF3_H	include/hf3.h	4;"	d
INTER_M	lib/func.c	6;"	d	file:
INTER_N	lib/func.c	5;"	d	file:
Info	include/hf3.h	/^typedef struct Info {$/;"	s
Info	include/hf3.h	/^} Info;$/;"	t	typeref:struct:Info
Info2Path	pyhf3/wan2.py	/^	def Info2Path(self, len_path=1000):$/;"	m	class:Wan2
InitA1	mod/hf3.c	/^inline void InitA1(double *m) { m[0] = 0.1; m[1] = 1.0; m[2] = 0.1; }$/;"	f
InitA2	mod/hf3.c	/^inline void InitA2(double *m) { m[0] = 1.0; m[1] = 0.1; m[2] = 1.0; }$/;"	f
InitC1	mod/hf3.c	/^inline void InitC1(double *m) { m[0] = 1.0; m[1] = 0.1; m[2] = 0.1; }$/;"	f
InitC2	mod/hf3.c	/^inline void InitC2(double *m) { m[0] = 0.1; m[1] = 1.0; m[2] = 1.0; }$/;"	f
InteractionFD	lib/func.c	/^void InteractionFD(Solution *s, lapack_complex_double *tbblock) {$/;"	f
InteractionGD	lib/func.c	/^void InteractionGD(Solution *s, lapack_complex_double *tbblock) {$/;"	f
InteractionQ	lib/func.c	/^void InteractionQ(Solution *s, lapack_complex_double *tbblock) {$/;"	f
InteractionS	lib/func.c	/^void InteractionS(Solution *s, lapack_complex_double *tbblock) {$/;"	f
J	include/hf3.h	/^	double J; \/\/ Hund coupling$/;"	m	struct:SelfConsistentSolution
JU	include/hf3.h	/^	double JU; \/\/ Hund coupling per Coulomb interaction$/;"	m	struct:SelfConsistentSolution
LAPACKParameter	include/hf3.h	/^typedef struct LAPACKParameter {$/;"	s
LDFLAGS	lib/Makefile	/^LDFLAGS = -mcmodel=medium -L$(USR_DIR)\/lib64 -L$(OMP_DIR)\/lib -L$(GSL_DIR)\/lib -fopenmp $/;"	m
LDFLAGS	mod/Makefile	/^LDFLAGS = -mcmodel=medium -L..\/lib -L$(USR_DIR)\/lib64 -L$(OMP_DIR)\/lib -L$(GSL_DIR)\/lib -fopenmp $/;"	m
LIBS	lib/Makefile	/^LIBS = libhf3.a$/;"	m
LINKS	lib/Makefile	/^LINKS = -lm -llapack -lgsl -lgslcblas$/;"	m
LINKS	mod/Makefile	/^LINKS = -lhf3 -lm -llapack -lgsl -lgslcblas$/;"	m
LParameter	include/hf3.h	/^} LParameter;$/;"	t	typeref:struct:LAPACKParameter
Lattice	include/hf3.h	/^typedef struct Lattice {$/;"	s
Lattice	include/hf3.h	/^} Lattice;$/;"	t	typeref:struct:Lattice
LineCollection	pyhf3/draw.py	/^from matplotlib.collections import LineCollection$/;"	i
LogisticRegression	pyhf3/magstr.py	/^from sklearn.linear_model import LogisticRegression$/;"	i
ML	pyhf3/magstr.py	/^class ML:$/;"	c
MakeBand	lib/func.c	/^void MakeBand(Solution *s, LParameter *lp, lapack_complex_double *tbb, void (*Interaction)(), int is_tr) {$/;"	f
MakeBand	pyhf3/magstr.py	/^	def MakeBand(self, tol):$/;"	m	class:ML
MakeDOS	lib/func.c	/^void MakeDOS(Solution *s, LParameter *lp, lapack_complex_double *tbg, void (*Interaction)(), int is_tr) {$/;"	f
MakeDOS	pyhf3/magstr.py	/^	def MakeDOS(self, bins, eta):$/;"	m	class:ML
MakeGroundIdx	pyhf3/draw.py	/^from .read import ReadFs, MakeGroundIdx$/;"	i
MakeGroundIdx	pyhf3/magstr.py	/^from .read import ReadFs, MakeGroundIdx$/;"	i
MakeGroundIdx	pyhf3/read.py	/^def MakeGroundIdx(fs_list):$/;"	f
MakeUFW	lib/func.c	/^void MakeUFW(Solution *s, double *ev, lapack_complex_double *es, int is_tr) {$/;"	f
N	include/hf3.h	/^	double N; \/\/ target occupation$/;"	m	struct:SelfConsistentSolution
Nb	include/hf3.h	/^	int Nb; \/\/ num of bases = Ni * Nc * 2(spin up and dn)$/;"	m	struct:Info
Nc	include/hf3.h	/^	int Nc; \/\/ num of orbitals per atom$/;"	m	struct:Info
Ni	include/hf3.h	/^	int Ni; \/\/ num of atoms per unit cell$/;"	m	struct:Info
Nkb	include/hf3.h	/^	int Nkb; \/\/ num of kpoints at band path points$/;"	m	struct:Info
Nkg	include/hf3.h	/^	int Nkg; \/\/ num of kpoints at Gauss-Legendre quadrature points$/;"	m	struct:Info
OBJS	lib/Makefile	/^OBJS = func.o path.o$/;"	m
OBJS	mod/Makefile	/^OBJS = init.o hf3.o$/;"	m
OBT_IDX	lib/func.c	3;"	d	file:
OMP_DIR	lib/Makefile	/^OMP_DIR = \/opt\/mpi\/gcc-4.8.5\/openmpi-4.1.0\/$/;"	m
OMP_DIR	mod/Makefile	/^OMP_DIR = \/opt\/mpi\/gcc-4.8.5\/openmpi-4.1.0\/$/;"	m
OMP_THREAD	include/hf3.h	7;"	d
OpenBand	pyhf3/magstr.py	/^	def OpenBand(self):$/;"	m	class:ML
OpenFile	lib/func.c	/^FILE* OpenFile(char *fname, char *ftype) {$/;"	f
Q2Sub	lib/func.c	/^void Q2Sub(int Nk, int Nb, int Nc, lapack_complex_double *tr, lapack_complex_double *es) {$/;"	f
RM	lib/Makefile	/^RM = rm -rf$/;"	m
RM	mod/Makefile	/^RM = rm -rf$/;"	m
RandomForestClassifier	pyhf3/magstr.py	/^from sklearn.ensemble import RandomForestClassifier$/;"	i
ReadFs	pyhf3/draw.py	/^from .read import ReadFs, MakeGroundIdx$/;"	i
ReadFs	pyhf3/magstr.py	/^from .read import ReadFs, MakeGroundIdx$/;"	i
ReadFs	pyhf3/read.py	/^def ReadFs(fs, dtype='band'):$/;"	f
ReadInfo	hf3.py	/^from pyhf3.read import ReadInfo$/;"	i
ReadInfo	lib/func.c	/^Info ReadInfo(char *name, char *type, char *ctype, Coord *q) {$/;"	f
ReadInfo	pyhf3/read.py	/^def ReadInfo(input_path):$/;"	f
ReadLat	lib/func.c	/^Lattice* ReadLat(char *name) {$/;"	f
SOC	include/hf3.h	/^	double SOC; \/\/ spin-orbit coupling$/;"	m	struct:SelfConsistentSolution
STATE_IDX	lib/func.c	4;"	d	file:
SelfConsistentSolution	include/hf3.h	/^typedef struct SelfConsistentSolution {$/;"	s
Solution	include/hf3.h	/^} Solution;$/;"	t	typeref:struct:SelfConsistentSolution
StandardScaler	pyhf3/magstr.py	/^from sklearn.preprocessing import StandardScaler$/;"	i
SymmetryA	lib/func.c	/^inline void SymmetryA(double *n, double *m) { n[2] = n[0];        m[2] = m[0]; }$/;"	f
SymmetryC	lib/func.c	/^inline void SymmetryC(double *n, double *m) { n[2] = n[1];        m[2] = m[1]; }$/;"	f
SymmetryF	lib/func.c	/^inline void SymmetryF(double *n, double *m) { }$/;"	f
SymmetryG	lib/func.c	/^inline void SymmetryG(double *n, double *m) { n[2] = n[1] = n[0]; m[2] = m[1] = m[0]; }$/;"	f
TARGETS	mod/Makefile	/^TARGETS = init hf3$/;"	m
U	include/hf3.h	/^	double U; \/\/ Coulomb interaction$/;"	m	struct:SelfConsistentSolution
USE_MATH_DEFINES	include/hf3.h	6;"	d
USR_DIR	lib/Makefile	/^USR_DIR = \/home\/9yelin9\/usr$/;"	m
USR_DIR	mod/Makefile	/^USR_DIR = \/home\/9yelin9\/usr$/;"	m
Wan2	pyhf3/wan2.py	/^class Wan2:$/;"	c
Wan2Info	pyhf3/wan2.py	/^	def Wan2Info(self, lat_type):$/;"	m	class:Wan2
Wan2Lat	pyhf3/wan2.py	/^	def Wan2Lat(self):$/;"	m	class:Wan2
__init__	pyhf3/draw.py	/^	def __init__(self, input_path, output_path, path_info, type_info, JU, SOC, tol):$/;"	m	class:Draw
__init__	pyhf3/magstr.py	/^	def __init__(self, output_path, path_info, type_info):$/;"	m	class:ML
__init__	pyhf3/wan2.py	/^	def __init__(self, path_input):$/;"	m	class:Wan2
accuracy_score	pyhf3/magstr.py	/^from sklearn.metrics import accuracy_score$/;"	i
argparse	hf3.py	/^import argparse$/;"	i
argparse	pyhf3/draw.py	/^import argparse$/;"	i
args	hf3.py	/^args = parser.parse_args()$/;"	v
bins_range	hf3.py	/^	bins_range = np.arange(10, 210, 10)$/;"	v
c	include/hf3.h	/^	double c[DIM];$/;"	m	struct:Coordinate
d	include/hf3.h	/^	Coord d; \/\/ distance$/;"	m	struct:Lattice
dntop	include/hf3.h	/^	double dntop; \/\/ dntop energy$/;"	m	struct:SelfConsistentSolution
dr	hf3.py	/^	dr = draw.Draw(path_input, path_output, info_path, info_cell, args.draw[1], args.draw[2], tol)$/;"	v
dr	hf3.py	/^dr = draw.Draw(path_input, path_output, info_path, info_cell, 0, 0, tol)$/;"	v
draw	hf3.py	/^	from pyhf3 import draw$/;"	i
e	include/hf3.h	/^	double e; \/\/ energy$/;"	m	struct:SelfConsistentSolution
eta_range	hf3.py	/^	eta_range = np.arange(0.1, 1.1, 0.1)$/;"	v
f	hf3.py	/^		f = open('%s\/magstr\/acc_%s.csv' % (path_output, args.magstr[0]), 'w')$/;"	v
fermi	include/hf3.h	/^	double fermi; \/\/ Fermi level	$/;"	m	struct:SelfConsistentSolution
func_dict	hf3.py	/^	func_dict = {$/;"	v
gap	include/hf3.h	/^	double gap; \/\/ band gap$/;"	m	struct:SelfConsistentSolution
info	include/hf3.h	/^	Info info;$/;"	m	struct:SelfConsistentSolution
info	include/hf3.h	/^	lapack_int info;$/;"	m	struct:LAPACKParameter
inset_axes	pyhf3/draw.py	/^from mpl_toolkits.axes_grid1.inset_locator import inset_axes$/;"	i
jobz	include/hf3.h	/^	char jobz;$/;"	m	struct:LAPACKParameter
lda	include/hf3.h	/^	lapack_int lda;$/;"	m	struct:LAPACKParameter
ln	include/hf3.h	/^	lapack_int ln;$/;"	m	struct:LAPACKParameter
lwork	include/hf3.h	/^	lapack_int lwork;$/;"	m	struct:LAPACKParameter
m	include/hf3.h	/^	double m; \/\/ sum of total magnetization$/;"	m	struct:SelfConsistentSolution
magstr	hf3.py	/^	from pyhf3 import magstr$/;"	i
main	mod/hf3.c	/^int main(int argc, char *argv[]) {$/;"	f
main	mod/init.c	/^int main(int argc, char *argv[]) {$/;"	f
matplotlib	hf3.py	/^import matplotlib.pyplot as plt$/;"	i
matplotlib	pyhf3/draw.py	/^import matplotlib.pyplot as plt$/;"	i
max	include/hf3.h	/^	double max;$/;"	m	struct:Energy
min	include/hf3.h	/^	double min;$/;"	m	struct:Energy
ms	hf3.py	/^	ms = magstr.ML(path_output, info_path, info_cell)$/;"	v
ms	include/hf3.h	/^	double *ms; \/\/ staggered magnetization per orbital$/;"	m	struct:SelfConsistentSolution
mt	include/hf3.h	/^	double *mt; \/\/ total magnetization per orbital$/;"	m	struct:SelfConsistentSolution
n	include/hf3.h	/^	double *n; \/\/ occupation per orbital$/;"	m	struct:SelfConsistentSolution
n	include/hf3.h	/^	double n; \/\/ sum of occupation$/;"	m	struct:SelfConsistentSolution
name	include/hf3.h	/^	char *name; \/\/ name of material$/;"	m	struct:Info
np	hf3.py	/^import numpy as np$/;"	i
np	pyhf3/draw.py	/^import numpy as np$/;"	i
np	pyhf3/magstr.py	/^import numpy as np$/;"	i
np	pyhf3/read.py	/^import numpy as np$/;"	i
np	pyhf3/wan2.py	/^import numpy as np$/;"	i
obf	include/hf3.h	/^	int obf; \/\/ final orbital$/;"	m	struct:Lattice
obi	include/hf3.h	/^	int obi; \/\/ initial orbital$/;"	m	struct:Lattice
os	hf3.py	/^import os$/;"	i
os	pyhf3/draw.py	/^import os$/;"	i
os	pyhf3/magstr.py	/^import os$/;"	i
os	pyhf3/read.py	/^import os$/;"	i
parser	hf3.py	/^parser = argparse.ArgumentParser(formatter_class=argparse.RawTextHelpFormatter)$/;"	v
path_input	hf3.py	/^	path_input = 'input\/%s\/' % args.name[0].split('_')[0]$/;"	v
path_output	hf3.py	/^	path_output = 'output\/%s\/' % args.name[0]$/;"	v
pd	hf3.py	/^import pandas as pd$/;"	i
pd	pyhf3/draw.py	/^import pandas as pd$/;"	i
pd	pyhf3/magstr.py	/^import pandas as pd$/;"	i
pd	pyhf3/read.py	/^import pandas as pd$/;"	i
plt	hf3.py	/^import matplotlib.pyplot as plt$/;"	i
plt	pyhf3/draw.py	/^import matplotlib.pyplot as plt$/;"	i
q	include/hf3.h	/^	Coord q; \/\/ ordering vector$/;"	m	struct:Info
re	hf3.py	/^import re$/;"	i
re	pyhf3/draw.py	/^import re$/;"	i
re	pyhf3/magstr.py	/^import re$/;"	i
re	pyhf3/read.py	/^import re$/;"	i
re	pyhf3/wan2.py	/^import re$/;"	i
runtime	include/hf3.h	/^	char runtime[16]; \/\/ runtime$/;"	m	struct:Info
rwork	include/hf3.h	/^	double *rwork;$/;"	m	struct:LAPACKParameter
sys	hf3.py	/^import sys$/;"	i
tim	include/hf3.h	/^	double tim; \/\/ imag part of t$/;"	m	struct:Lattice
tol	hf3.py	/^tol = 0.1$/;"	v
train_test_split	pyhf3/magstr.py	/^from sklearn.model_selection import train_test_split$/;"	i
tre	include/hf3.h	/^	double tre; \/\/ real part of t$/;"	m	struct:Lattice
type	include/hf3.h	/^	char *type; \/\/ type of magnetic structure$/;"	m	struct:Info
uplo	include/hf3.h	/^	char uplo;$/;"	m	struct:LAPACKParameter
w2	hf3.py	/^	w2 = wan2.Wan2(path_input)$/;"	v
wan2	hf3.py	/^	from pyhf3 import wan2$/;"	i
work	include/hf3.h	/^	lapack_complex_double *work;$/;"	m	struct:LAPACKParameter
